<?xml version="1.0" encoding="UTF-8"?>
<modification
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="https://github.com/vqmod/vqmod"
        xsi:schemaLocation="https://github.com/vqmod/vqmod https://raw.githubusercontent.com/vqmod/vqmod/master/vqmod.xsd">
    <id>com.uwsoft.editor.renderer.spine.SpineDataHelper</id>
    <version>1.0</version>
    <vqmver>2.5.2</vqmver>
    <author>Socheat KHAUV</author>
    <!--
    <file name="git/overlap2d-runtime-libgdx/src/com/uwsoft/editor/renderer/spine/SpineDataHelper.java">
        <operation>
            <search position="replace"><![CDATA[private Object skeletonData;]]></search>
            <add><![CDATA[private com.esotericsoftware.spine.SkeletonData skeletonData;]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[public Object stateObject;]]></search>
            <add><![CDATA[public com.esotericsoftware.spine.AnimationState stateObject;]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[private Object skeletonObject;]]></search>
            <add><![CDATA[private com.esotericsoftware.spine.Skeleton skeletonObject;]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[private Object renderer;]]></search>
            <add><![CDATA[private com.esotericsoftware.spine.SkeletonRenderer renderer;]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[Object skeletonJsonObject = reflectionData.skeletonJsonConstructorAccess.newInstance(rm.getSkeletonAtlas(dataVO.animationName));]]></search>
            <add>
                <![CDATA[com.esotericsoftware.spine.SkeletonJson skeletonJsonObject = new com.esotericsoftware.spine.SkeletonJson(rm.getSkeletonAtlas(dataVO.animationName));]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[readSkeletonData.invoke(skeletonJsonObject, rm.getSkeletonJSON(dataVO.animationName));]]></search>
            <add><![CDATA[skeletonJsonObject.readSkeletonData(rm.getSkeletonJSON(dataVO.animationName));]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.skeletonConstructorAccess.newInstance(skeletonData);]]></search>
            <add><![CDATA[new com.esotericsoftware.spine.Skeleton(skeletonData);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[Object animationStateDataObject = reflectionData.animationStateDataConstructorAccess.newInstance(skeletonData);]]></search>
            <add>
                <![CDATA[com.esotericsoftware.spine.AnimationStateData animationStateDataObject = new com.esotericsoftware.spine.AnimationStateData(skeletonData);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.animationStateConstructorAccess.newInstance(animationStateDataObject);]]></search>
            <add><![CDATA[new com.esotericsoftware.spine.AnimationState(animationStateDataObject);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[return (Array<Object>) reflectionData.getAnimationMethodIndex.invoke(skeletonData);]]></search>
            <add><![CDATA[return skeletonData.getAnimations();]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[public Array<Object> getAnimations(){]]></search>
            <add><![CDATA[public Array<com.esotericsoftware.spine.Animation> getAnimations(){]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[ReflectionException e]]></search>
            <add><![CDATA[com.badlogic.gdx.utils.GdxRuntimeException e]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.skeletonRendererDrawMethodIndex.invoke(renderer, batch, skeletonObject);]]></search>
            <add><![CDATA[renderer.draw(batch,skeletonObject);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.updateWorldTransformMethodIndex.invoke(skeletonObject);]]></search>
            <add><![CDATA[skeletonObject.updateWorldTransform();]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[reflectionData.updateMethodIndex.invoke(stateObject, delta);]]></search>
            <add><![CDATA[stateObject.update(delta);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.applyMethodIndex.invoke(stateObject, skeletonObject);]]></search>
            <add><![CDATA[stateObject.apply(skeletonObject);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.setPositionMethodIndex.invoke(skeletonObject, x - minX, y - minY);]]></search>
            <add><![CDATA[skeletonObject.setPosition(x - minX, y - minY);]]></add>
        </operation>
        <operation>
            <search position="replace">
                <![CDATA[reflectionData.setAnimationMethodIndex.invoke(stateObject,0, animName, true);]]></search>
            <add><![CDATA[stateObject.setAnimation(0,animName,true);]]></add>
        </operation>
    </file>
    -->
</modification>